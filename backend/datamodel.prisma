enum Status {
  STARTING
  FETCHING_DRIVE
  UPLOADING_ELASTIC
  SONGS_UPLOADED
  DOWNLOADING
  UPLOADING_METADATA
  SONG_METADATA_UPLOADED
  READY
}

type User {
  id: ID! @unique @id
  providerId: String! @unique
  displayName: String!
  picture: String!
  refreshToken: String!
  email: String!
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

type MusicFolder {
  id: ID! @unique @id
  folderId: String!
  totalFiles: Int
  totalFolders: Int
  name: String!
  iconUrl: String
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
  states: [State!]! @relation(name: "StateByMusicFolder", onDelete: CASCADE)
  user: User!
}

type State {
  id: ID! @unique @id
  folder: MusicFolder!
    @relation(link: INLINE, onDelete: CASCADE, name: "StateByMusicFolder")
  status: Status!
  extraData: Json
  errorMessage: String
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}
