# source: https://us1.prisma.sh/music-drive/music-drive/dev
# timestamp: Wed May 29 2019 19:44:08 GMT-0500 (Peru Standard Time)

type AggregateMusicFolder {
  count: Int!
}

type AggregateState {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MusicFolder implements Node {
  id: ID!
  folderId: String!
  totalFiles: Int
  totalFolders: Int
  name: String!
  iconUrl: String
  updatedAt: DateTime!
  createdAt: DateTime!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State!]
  user: User!
}

"""A connection to a list of items."""
type MusicFolderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MusicFolderEdge]!
  aggregate: AggregateMusicFolder!
}

input MusicFolderCreateInput {
  id: ID
  folderId: String!
  totalFiles: Int
  totalFolders: Int
  name: String!
  iconUrl: String
  states: StateCreateManyWithoutFolderInput
  user: UserCreateOneInput!
}

input MusicFolderCreateOneWithoutStatesInput {
  create: MusicFolderCreateWithoutStatesInput
  connect: MusicFolderWhereUniqueInput
}

input MusicFolderCreateWithoutStatesInput {
  id: ID
  folderId: String!
  totalFiles: Int
  totalFolders: Int
  name: String!
  iconUrl: String
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type MusicFolderEdge {
  """The item at the end of the edge."""
  node: MusicFolder!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MusicFolderOrderByInput {
  id_ASC
  id_DESC
  folderId_ASC
  folderId_DESC
  totalFiles_ASC
  totalFiles_DESC
  totalFolders_ASC
  totalFolders_DESC
  name_ASC
  name_DESC
  iconUrl_ASC
  iconUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MusicFolderPreviousValues {
  id: ID!
  folderId: String!
  totalFiles: Int
  totalFolders: Int
  name: String!
  iconUrl: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type MusicFolderSubscriptionPayload {
  mutation: MutationType!
  node: MusicFolder
  updatedFields: [String!]
  previousValues: MusicFolderPreviousValues
}

input MusicFolderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MusicFolderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MusicFolderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MusicFolderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MusicFolderWhereInput
}

input MusicFolderUpdateInput {
  folderId: String
  totalFiles: Int
  totalFolders: Int
  name: String
  iconUrl: String
  states: StateUpdateManyWithoutFolderInput
  user: UserUpdateOneRequiredInput
}

input MusicFolderUpdateManyMutationInput {
  folderId: String
  totalFiles: Int
  totalFolders: Int
  name: String
  iconUrl: String
}

input MusicFolderUpdateOneRequiredWithoutStatesInput {
  create: MusicFolderCreateWithoutStatesInput
  connect: MusicFolderWhereUniqueInput
  update: MusicFolderUpdateWithoutStatesDataInput
  upsert: MusicFolderUpsertWithoutStatesInput
}

input MusicFolderUpdateWithoutStatesDataInput {
  folderId: String
  totalFiles: Int
  totalFolders: Int
  name: String
  iconUrl: String
  user: UserUpdateOneRequiredInput
}

input MusicFolderUpsertWithoutStatesInput {
  update: MusicFolderUpdateWithoutStatesDataInput!
  create: MusicFolderCreateWithoutStatesInput!
}

input MusicFolderWhereInput {
  """Logical AND on all given filters."""
  AND: [MusicFolderWhereInput!]

  """Logical OR on all given filters."""
  OR: [MusicFolderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MusicFolderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  folderId: String

  """All values that are not equal to given value."""
  folderId_not: String

  """All values that are contained in given list."""
  folderId_in: [String!]

  """All values that are not contained in given list."""
  folderId_not_in: [String!]

  """All values less than the given value."""
  folderId_lt: String

  """All values less than or equal the given value."""
  folderId_lte: String

  """All values greater than the given value."""
  folderId_gt: String

  """All values greater than or equal the given value."""
  folderId_gte: String

  """All values containing the given string."""
  folderId_contains: String

  """All values not containing the given string."""
  folderId_not_contains: String

  """All values starting with the given string."""
  folderId_starts_with: String

  """All values not starting with the given string."""
  folderId_not_starts_with: String

  """All values ending with the given string."""
  folderId_ends_with: String

  """All values not ending with the given string."""
  folderId_not_ends_with: String
  totalFiles: Int

  """All values that are not equal to given value."""
  totalFiles_not: Int

  """All values that are contained in given list."""
  totalFiles_in: [Int!]

  """All values that are not contained in given list."""
  totalFiles_not_in: [Int!]

  """All values less than the given value."""
  totalFiles_lt: Int

  """All values less than or equal the given value."""
  totalFiles_lte: Int

  """All values greater than the given value."""
  totalFiles_gt: Int

  """All values greater than or equal the given value."""
  totalFiles_gte: Int
  totalFolders: Int

  """All values that are not equal to given value."""
  totalFolders_not: Int

  """All values that are contained in given list."""
  totalFolders_in: [Int!]

  """All values that are not contained in given list."""
  totalFolders_not_in: [Int!]

  """All values less than the given value."""
  totalFolders_lt: Int

  """All values less than or equal the given value."""
  totalFolders_lte: Int

  """All values greater than the given value."""
  totalFolders_gt: Int

  """All values greater than or equal the given value."""
  totalFolders_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  iconUrl: String

  """All values that are not equal to given value."""
  iconUrl_not: String

  """All values that are contained in given list."""
  iconUrl_in: [String!]

  """All values that are not contained in given list."""
  iconUrl_not_in: [String!]

  """All values less than the given value."""
  iconUrl_lt: String

  """All values less than or equal the given value."""
  iconUrl_lte: String

  """All values greater than the given value."""
  iconUrl_gt: String

  """All values greater than or equal the given value."""
  iconUrl_gte: String

  """All values containing the given string."""
  iconUrl_contains: String

  """All values not containing the given string."""
  iconUrl_not_contains: String

  """All values starting with the given string."""
  iconUrl_starts_with: String

  """All values not starting with the given string."""
  iconUrl_not_starts_with: String

  """All values ending with the given string."""
  iconUrl_ends_with: String

  """All values not ending with the given string."""
  iconUrl_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  states_every: StateWhereInput
  states_some: StateWhereInput
  states_none: StateWhereInput
  user: UserWhereInput
}

input MusicFolderWhereUniqueInput {
  id: ID
}

type Mutation {
  createMusicFolder(data: MusicFolderCreateInput!): MusicFolder!
  createState(data: StateCreateInput!): State!
  createUser(data: UserCreateInput!): User!
  updateMusicFolder(data: MusicFolderUpdateInput!, where: MusicFolderWhereUniqueInput!): MusicFolder
  updateState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteMusicFolder(where: MusicFolderWhereUniqueInput!): MusicFolder
  deleteState(where: StateWhereUniqueInput!): State
  deleteUser(where: UserWhereUniqueInput!): User
  upsertMusicFolder(where: MusicFolderWhereUniqueInput!, create: MusicFolderCreateInput!, update: MusicFolderUpdateInput!): MusicFolder!
  upsertState(where: StateWhereUniqueInput!, create: StateCreateInput!, update: StateUpdateInput!): State!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyMusicFolders(data: MusicFolderUpdateManyMutationInput!, where: MusicFolderWhereInput): BatchPayload!
  updateManyStates(data: StateUpdateManyMutationInput!, where: StateWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyMusicFolders(where: MusicFolderWhereInput): BatchPayload!
  deleteManyStates(where: StateWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  musicFolders(where: MusicFolderWhereInput, orderBy: MusicFolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MusicFolder]!
  states(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [State]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  musicFolder(where: MusicFolderWhereUniqueInput!): MusicFolder
  state(where: StateWhereUniqueInput!): State
  user(where: UserWhereUniqueInput!): User
  musicFoldersConnection(where: MusicFolderWhereInput, orderBy: MusicFolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MusicFolderConnection!
  statesConnection(where: StateWhereInput, orderBy: StateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StateConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type State implements Node {
  id: ID!
  folder: MusicFolder!
  status: Status!
  extraData: Json
  errorMessage: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type StateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateEdge]!
  aggregate: AggregateState!
}

input StateCreateInput {
  id: ID
  status: Status!
  extraData: Json
  errorMessage: String
  folder: MusicFolderCreateOneWithoutStatesInput!
}

input StateCreateManyWithoutFolderInput {
  create: [StateCreateWithoutFolderInput!]
  connect: [StateWhereUniqueInput!]
}

input StateCreateWithoutFolderInput {
  id: ID
  status: Status!
  extraData: Json
  errorMessage: String
}

"""An edge in a connection."""
type StateEdge {
  """The item at the end of the edge."""
  node: State!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StateOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  extraData_ASC
  extraData_DESC
  errorMessage_ASC
  errorMessage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StatePreviousValues {
  id: ID!
  status: Status!
  extraData: Json
  errorMessage: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input StateScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StateScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  errorMessage: String

  """All values that are not equal to given value."""
  errorMessage_not: String

  """All values that are contained in given list."""
  errorMessage_in: [String!]

  """All values that are not contained in given list."""
  errorMessage_not_in: [String!]

  """All values less than the given value."""
  errorMessage_lt: String

  """All values less than or equal the given value."""
  errorMessage_lte: String

  """All values greater than the given value."""
  errorMessage_gt: String

  """All values greater than or equal the given value."""
  errorMessage_gte: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values starting with the given string."""
  errorMessage_starts_with: String

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values not ending with the given string."""
  errorMessage_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type StateSubscriptionPayload {
  mutation: MutationType!
  node: State
  updatedFields: [String!]
  previousValues: StatePreviousValues
}

input StateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StateWhereInput
}

input StateUpdateInput {
  status: Status
  extraData: Json
  errorMessage: String
  folder: MusicFolderUpdateOneRequiredWithoutStatesInput
}

input StateUpdateManyDataInput {
  status: Status
  extraData: Json
  errorMessage: String
}

input StateUpdateManyMutationInput {
  status: Status
  extraData: Json
  errorMessage: String
}

input StateUpdateManyWithoutFolderInput {
  create: [StateCreateWithoutFolderInput!]
  connect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutFolderInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  deleteMany: [StateScalarWhereInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutFolderInput!]
}

input StateUpdateManyWithWhereNestedInput {
  where: StateScalarWhereInput!
  data: StateUpdateManyDataInput!
}

input StateUpdateWithoutFolderDataInput {
  status: Status
  extraData: Json
  errorMessage: String
}

input StateUpdateWithWhereUniqueWithoutFolderInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutFolderDataInput!
}

input StateUpsertWithWhereUniqueWithoutFolderInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutFolderDataInput!
  create: StateCreateWithoutFolderInput!
}

input StateWhereInput {
  """Logical AND on all given filters."""
  AND: [StateWhereInput!]

  """Logical OR on all given filters."""
  OR: [StateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  errorMessage: String

  """All values that are not equal to given value."""
  errorMessage_not: String

  """All values that are contained in given list."""
  errorMessage_in: [String!]

  """All values that are not contained in given list."""
  errorMessage_not_in: [String!]

  """All values less than the given value."""
  errorMessage_lt: String

  """All values less than or equal the given value."""
  errorMessage_lte: String

  """All values greater than the given value."""
  errorMessage_gt: String

  """All values greater than or equal the given value."""
  errorMessage_gte: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values starting with the given string."""
  errorMessage_starts_with: String

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values not ending with the given string."""
  errorMessage_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  folder: MusicFolderWhereInput
}

input StateWhereUniqueInput {
  id: ID
}

enum Status {
  STARTING
  FETCHING_DRIVE
  UPLOADING_ELASTIC
  SONGS_UPLOADED
  DOWNLOADING
  UPLOADING_METADATA
  SONG_METADATA_UPLOADED
  READY
}

type Subscription {
  musicFolder(where: MusicFolderSubscriptionWhereInput): MusicFolderSubscriptionPayload
  state(where: StateSubscriptionWhereInput): StateSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  providerId: String!
  displayName: String!
  picture: String!
  refreshToken: String!
  email: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  providerId: String!
  displayName: String!
  picture: String!
  refreshToken: String!
  email: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  providerId_ASC
  providerId_DESC
  displayName_ASC
  displayName_DESC
  picture_ASC
  picture_DESC
  refreshToken_ASC
  refreshToken_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  providerId: String!
  displayName: String!
  picture: String!
  refreshToken: String!
  email: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  providerId: String
  displayName: String
  picture: String
  refreshToken: String
  email: String
}

input UserUpdateInput {
  providerId: String
  displayName: String
  picture: String
  refreshToken: String
  email: String
}

input UserUpdateManyMutationInput {
  providerId: String
  displayName: String
  picture: String
  refreshToken: String
  email: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  providerId: String

  """All values that are not equal to given value."""
  providerId_not: String

  """All values that are contained in given list."""
  providerId_in: [String!]

  """All values that are not contained in given list."""
  providerId_not_in: [String!]

  """All values less than the given value."""
  providerId_lt: String

  """All values less than or equal the given value."""
  providerId_lte: String

  """All values greater than the given value."""
  providerId_gt: String

  """All values greater than or equal the given value."""
  providerId_gte: String

  """All values containing the given string."""
  providerId_contains: String

  """All values not containing the given string."""
  providerId_not_contains: String

  """All values starting with the given string."""
  providerId_starts_with: String

  """All values not starting with the given string."""
  providerId_not_starts_with: String

  """All values ending with the given string."""
  providerId_ends_with: String

  """All values not ending with the given string."""
  providerId_not_ends_with: String
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  refreshToken: String

  """All values that are not equal to given value."""
  refreshToken_not: String

  """All values that are contained in given list."""
  refreshToken_in: [String!]

  """All values that are not contained in given list."""
  refreshToken_not_in: [String!]

  """All values less than the given value."""
  refreshToken_lt: String

  """All values less than or equal the given value."""
  refreshToken_lte: String

  """All values greater than the given value."""
  refreshToken_gt: String

  """All values greater than or equal the given value."""
  refreshToken_gte: String

  """All values containing the given string."""
  refreshToken_contains: String

  """All values not containing the given string."""
  refreshToken_not_contains: String

  """All values starting with the given string."""
  refreshToken_starts_with: String

  """All values not starting with the given string."""
  refreshToken_not_starts_with: String

  """All values ending with the given string."""
  refreshToken_ends_with: String

  """All values not ending with the given string."""
  refreshToken_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
  providerId: String
}
